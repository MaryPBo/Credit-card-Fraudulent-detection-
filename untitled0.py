# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/15WuS9kMD0SuRiO-4_5BmG0YoKKty75H2
"""

import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split, GridSearchCV, cross_val_score
from sklearn.ensemble import RandomForestClassifier
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import classification_report, accuracy_score, roc_auc_score, confusion_matrix
from imblearn.over_sampling import SMOTE
import matplotlib.pyplot as plt
import seaborn as sns

# Load the dataset
file_path = 'path_to_your_file/creditcard.csv'  # Replace with your file path
data = pd.read_csv('/content/archive (21).zip')
# Data Exploration
print("Data shape:", data.shape)
print("Data types:\n", data.dtypes)
print("Missing values:\n", data.isnull().sum())
print("Class distribution:\n", data['Class'].value_counts(normalize=True))

# Correlation matrix
corr = data.corr()
plt.figure(figsize=(12, 10))
sns.heatmap(corr, cmap='coolwarm', annot=False)
plt.title('Correlation Matrix')
plt.show()

# Feature scaling for 'Time' and 'Amount'
scaler = StandardScaler()
data['NormalizedAmount'] = scaler.fit_transform(data['Amount'].values.reshape(-1, 1))
data.drop(['Time', 'Amount'], axis=1, inplace=True)

# Separate features and target variable
X = data.drop('Class', axis=1)
y = data['Class']

# Handling Imbalanced Dataset
smote = SMOTE(random_state=42)
X_sm, y_sm = smote.fit_resample(X, y)
print("After SMOTE, counts of label '1': {}".format(sum(y_sm == 1)))
print("After SMOTE, counts of label '0': {}".format(sum(y_sm == 0)))

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X_sm, y_sm, test_size=0.3, random_state=42)

# Hyperparameter Tuning
param_grid = {
    'n_estimators': [100, 200],
    'max_features': ['auto', 'sqrt'],
    'max_depth' : [4, 5, 6, 7, 8],
    'criterion' :['gini', 'entropy']
}
rfc = RandomForestClassifier(random_state=42)
CV_rfc = GridSearchCV(estimator=rfc, param_grid=param_grid, cv= 5)
CV_rfc.fit(X_train, y_train)

# Best parameters
print("Best Parameters:\n", CV_rfc.best_params_)

# Initialize and train the Random Forest Classifier with best parameters
model = RandomForestClassifier(**CV_rfc.best_params_)
model.fit(X_train, y_train)

# Cross-validation
cv_scores = cross_val_score(model, X_sm, y_sm, cv=5)
print("Cross-validation scores:", cv_scores)

# Make predictions
predictions = model.predict(X_test)

# Evaluate the model
print("Accuracy:", accuracy_score(y_test, predictions))
print("ROC AUC Score:", roc_auc_score(y_test, predictions))
print("\nConfusion Matrix:\n", confusion_matrix(y_test, predictions))
print("\nClassification Report:\n", classification_report(y_test, predictions))
